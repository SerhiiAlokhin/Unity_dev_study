//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/inputs/My controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Mycontroller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Mycontroller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""My controller"",
    ""maps"": [
        {
            ""name"": ""ball"",
            ""id"": ""bc299288-2f73-441d-b62f-1cd496384b1f"",
            ""actions"": [
                {
                    ""name"": ""movement"",
                    ""type"": ""Value"",
                    ""id"": ""cb5b42f8-5abe-4c9a-a64d-e2e6e962ead7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""exitbutton"",
                    ""type"": ""Button"",
                    ""id"": ""127fa163-fa00-482d-9cb3-ee09939b735e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7abab17e-4321-4b6e-939f-0c2313349a6c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""44f6844f-9df5-48b2-8fd7-de721a7faada"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""keyboard1"",
                    ""id"": ""241e5d35-6809-4eea-8228-d6a7cac86740"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02f5e909-bd57-4df2-84c9-1101b7a73505"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eeb20192-3606-4210-b6bd-e2304bef343d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""30aeff6e-3c32-4fa5-837b-1137343f064e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4da06084-d53d-4690-8024-692021bc423a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""keyboard2"",
                    ""id"": ""7bda61d9-6b15-4df7-8335-7a763691002e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""456188c2-03ef-490b-a031-97a6d9711f25"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5a875ff2-65aa-4331-8762-fd0b1613173e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75509c1c-bcb7-4dea-afaf-e95cebae05b6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5e1ecf4c-6b17-45ac-bf11-acb8a9fd7317"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1bf696ed-1fb5-4d1a-96a8-f241441cb8c9"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""exitbutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0de1f565-944b-44fe-9a08-cbdff91ee8e1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""exitbutton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d70b2e9f-4556-4f29-ace2-28cfcdaedbbf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ball
        m_ball = asset.FindActionMap("ball", throwIfNotFound: true);
        m_ball_movement = m_ball.FindAction("movement", throwIfNotFound: true);
        m_ball_exitbutton = m_ball.FindAction("exitbutton", throwIfNotFound: true);
        m_ball_Jump = m_ball.FindAction("Jump", throwIfNotFound: true);
    }

    ~@Mycontroller()
    {
        UnityEngine.Debug.Assert(!m_ball.enabled, "This will cause a leak and performance issues, Mycontroller.ball.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ball
    private readonly InputActionMap m_ball;
    private List<IBallActions> m_BallActionsCallbackInterfaces = new List<IBallActions>();
    private readonly InputAction m_ball_movement;
    private readonly InputAction m_ball_exitbutton;
    private readonly InputAction m_ball_Jump;
    public struct BallActions
    {
        private @Mycontroller m_Wrapper;
        public BallActions(@Mycontroller wrapper) { m_Wrapper = wrapper; }
        public InputAction @movement => m_Wrapper.m_ball_movement;
        public InputAction @exitbutton => m_Wrapper.m_ball_exitbutton;
        public InputAction @Jump => m_Wrapper.m_ball_Jump;
        public InputActionMap Get() { return m_Wrapper.m_ball; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BallActions set) { return set.Get(); }
        public void AddCallbacks(IBallActions instance)
        {
            if (instance == null || m_Wrapper.m_BallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BallActionsCallbackInterfaces.Add(instance);
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @exitbutton.started += instance.OnExitbutton;
            @exitbutton.performed += instance.OnExitbutton;
            @exitbutton.canceled += instance.OnExitbutton;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IBallActions instance)
        {
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @exitbutton.started -= instance.OnExitbutton;
            @exitbutton.performed -= instance.OnExitbutton;
            @exitbutton.canceled -= instance.OnExitbutton;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IBallActions instance)
        {
            if (m_Wrapper.m_BallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBallActions instance)
        {
            foreach (var item in m_Wrapper.m_BallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BallActions @ball => new BallActions(this);
    public interface IBallActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnExitbutton(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
